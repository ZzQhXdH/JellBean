<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\JellyBean.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\JellyBean.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Thu Sep 06 14:39:52 2018
<BR><P>
<H3>Maximum Stack Usage =        192 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
ReceiverTask::run() &rArr; MainEvent::exec(BaseOutput&) &rArr; MainEvent::deliver(BaseOutput&, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; MotorManager::instance() &rArr; MotorManager::MotorManager() &rArr; MotorManager::xStepToOrigin() &rArr; MotorManager::xYAxisToUp(unsigned) &rArr; MotorManager::isYAxisLrt() &rArr; CurrentAdc::instance() &rArr; CurrentAdc::CurrentAdc()
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[ac]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[d]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">NMI_Handler</a><BR>
 <LI><a href="#[e]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">HardFault_Handler</a><BR>
 <LI><a href="#[f]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">MemManage_Handler</a><BR>
 <LI><a href="#[10]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">BusFault_Handler</a><BR>
 <LI><a href="#[11]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">UsageFault_Handler</a><BR>
 <LI><a href="#[13]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">DebugMon_Handler</a><BR>
 <LI><a href="#[28]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">ADC_IRQHandler</a><BR>
 <LI><a href="#[bd]">osRtxErrorNotify</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[bd]">osRtxErrorNotify</a><BR>
 <LI><a href="#[75]">osRtxIdleThread</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[75]">osRtxIdleThread</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[28]">ADC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[10]">BusFault_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2a]">CAN1_RX0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2b]">CAN1_RX1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2c]">CAN1_SCE_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[29]">CAN1_TX_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[56]">CAN2_RX0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[57]">CAN2_RX1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[58]">CAN2_SCE_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[55]">CAN2_TX_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[65]">CRYP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[64]">DCMI_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[21]">DMA1_Stream0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[22]">DMA1_Stream1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[23]">DMA1_Stream2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[24]">DMA1_Stream3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[25]">DMA1_Stream4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[26]">DMA1_Stream5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[27]">DMA1_Stream6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[45]">DMA1_Stream7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[51]">DMA2_Stream3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[52]">DMA2_Stream4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5a]">DMA2_Stream5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5b]">DMA2_Stream6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5c]">DMA2_Stream7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[13]">DebugMon_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[53]">ETH_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[54]">ETH_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1c]">EXTI0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3e]">EXTI15_10_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1d]">EXTI1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1e]">EXTI2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1f]">EXTI3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[20]">EXTI4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2d]">EXTI9_5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1a]">FLASH_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[67]">FPU_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[46]">FSMC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[66]">HASH_RNG_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[e]">HardFault_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[36]">I2C1_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[35]">I2C1_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[38]">I2C2_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[37]">I2C2_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5f]">I2C3_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5e]">I2C3_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[f]">MemManage_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[d]">NMI_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[59]">OTG_FS_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[40]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[61]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[60]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[63]">OTG_HS_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[62]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[17]">PVD_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[14]">PendSV_Handler</a> from irq_cm4f.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1b]">RCC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3f]">RTC_Alarm_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[19]">RTC_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[c]">Reset_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[47]">SDIO_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[39]">SPI1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3a]">SPI2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[49]">SPI3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[12]">SVC_Handler</a> from irq_cm4f.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[15]">SysTick_Handler</a> from irq_cm4f.o(.text) referenced from rtx_kernel.o(.text.svcRtxKernelStart)
 <LI><a href="#[15]">SysTick_Handler</a> from irq_cm4f.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[68]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f40_41xxx.o(.text)
 <LI><a href="#[18]">TAMP_STAMP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2e]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[31]">TIM1_CC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[30]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2f]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[32]">TIM2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[33]">TIM3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[34]">TIM4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[48]">TIM5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4c]">TIM6_DAC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4d]">TIM7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[41]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[44]">TIM8_CC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[43]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[42]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4a]">UART4_IRQHandler</a> from mainuart.o(i.UART4_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4b]">UART5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3b]">USART1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3c]">USART2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3d]">USART3_IRQHandler</a> from loguart.o(i.USART3_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5d]">USART6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[11]">UsageFault_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[16]">WWDG_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[80]">ReceiverTask::run()</a> from receivertask.o(i._ZN12ReceiverTask3runEv) referenced from receivertask.o(.constdata__ZTV12ReceiverTask)
 <LI><a href="#[81]">StatusUpdateTask::run()</a> from statusupdatetask.o(i._ZN16StatusUpdateTask3runEv) referenced from statusupdatetask.o(.constdata__ZTV16StatusUpdateTask)
 <LI><a href="#[7f]">Task::startFunction(void*)</a> from task.o(i._ZN4Task13startFunctionEPv) referenced from task.o(i._ZN4Task5startEv)
 <LI><a href="#[83]">LogTask::run()</a> from main.o(i._ZN7LogTask3runEv) referenced from main.o(.constdata__ZTV7LogTask)
 <LI><a href="#[84]">MainUart::write(const unsigned char*, unsigned short)</a> from mainuart.o(i._ZN8MainUart5writeEPKht) referenced from mainuart.o(.constdata__ZTV8MainUart)
 <LI><a href="#[85]">StartTask::run()</a> from main.o(i._ZN9StartTask3runEv) referenced from main.o(.constdata__ZTV9StartTask)
 <LI><a href="#[82]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from task.o(.constdata__ZTV4Task)
 <LI><a href="#[88]">__main</a> from __main.o(!!!main) referenced from startup_stm32f40_41xxx.o(.text)
 <LI><a href="#[86]">__sti___11_LogUart_cpp_f947086d</a> from loguart.o(i.__sti___11_LogUart_cpp_f947086d) referenced from loguart.o(.init_array)
 <LI><a href="#[87]">__sti___12_MainUart_cpp_f0dc2c7d</a> from mainuart.o(i.__sti___12_MainUart_cpp_f0dc2c7d) referenced from mainuart.o(.init_array)
 <LI><a href="#[75]">osRtxIdleThread</a> from rtx_config.o(i.osRtxIdleThread) referenced from rtx_thread.o(.text.osRtxThreadStartup)
 <LI><a href="#[7b]">osRtxMemoryInit</a> from rtx_memory.o(.text.osRtxMemoryInit) referenced from rtx_kernel.o(.text.svcRtxKernelInitialize)
 <LI><a href="#[7c]">osRtxMessageQueuePostProcess</a> from rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) referenced from rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
 <LI><a href="#[7e]">osRtxThreadPostProcess</a> from rtx_thread.o(.text.osRtxThreadPostProcess) referenced from rtx_thread.o(.text.svcRtxThreadNew)
 <LI><a href="#[76]">osRtxTimerThread</a> from rtx_timer.o(.text.osRtxTimerThread) referenced from rtx_thread.o(.text.osRtxThreadStartup)
 <LI><a href="#[77]">osRtxTimerTick</a> from rtx_timer.o(.text.osRtxTimerTick) referenced from rtx_timer.o(.text.osRtxTimerThread)
 <LI><a href="#[7d]">osThreadExit</a> from rtx_thread.o(.text.osThreadExit) referenced from rtx_thread.o(.text.svcRtxThreadNew)
 <LI><a href="#[6a]">svcRtxDelay</a> from rtx_delay.o(.text.svcRtxDelay) referenced from rtx_delay.o(.text.osDelay)
 <LI><a href="#[6b]">svcRtxKernelGetState</a> from rtx_kernel.o(.text.svcRtxKernelGetState) referenced from rtx_kernel.o(.text.osKernelGetState)
 <LI><a href="#[6c]">svcRtxKernelInitialize</a> from rtx_kernel.o(.text.svcRtxKernelInitialize) referenced from rtx_kernel.o(.text.osKernelInitialize)
 <LI><a href="#[6d]">svcRtxKernelStart</a> from rtx_kernel.o(.text.svcRtxKernelStart) referenced from rtx_kernel.o(.text.osKernelStart)
 <LI><a href="#[6e]">svcRtxMessageQueueGet</a> from rtx_msgqueue.o(.text.svcRtxMessageQueueGet) referenced from rtx_msgqueue.o(.text.osMessageQueueGet)
 <LI><a href="#[6f]">svcRtxMessageQueueNew</a> from rtx_msgqueue.o(.text.svcRtxMessageQueueNew) referenced from rtx_msgqueue.o(.text.osMessageQueueNew)
 <LI><a href="#[70]">svcRtxMessageQueuePut</a> from rtx_msgqueue.o(.text.svcRtxMessageQueuePut) referenced from rtx_msgqueue.o(.text.osMessageQueuePut)
 <LI><a href="#[71]">svcRtxMutexAcquire</a> from rtx_mutex.o(.text.svcRtxMutexAcquire) referenced from rtx_mutex.o(.text.osMutexAcquire)
 <LI><a href="#[72]">svcRtxMutexDelete</a> from rtx_mutex.o(.text.svcRtxMutexDelete) referenced from rtx_mutex.o(.text.osMutexDelete)
 <LI><a href="#[73]">svcRtxMutexNew</a> from rtx_mutex.o(.text.svcRtxMutexNew) referenced from rtx_mutex.o(.text.osMutexNew)
 <LI><a href="#[74]">svcRtxMutexRelease</a> from rtx_mutex.o(.text.svcRtxMutexRelease) referenced from rtx_mutex.o(.text.osMutexRelease)
 <LI><a href="#[78]">svcRtxThreadExit</a> from rtx_thread.o(.text.svcRtxThreadExit) referenced from rtx_thread.o(.text.osThreadExit)
 <LI><a href="#[79]">svcRtxThreadNew</a> from rtx_thread.o(.text.svcRtxThreadNew) referenced from rtx_thread.o(.text.osThreadNew)
 <LI><a href="#[7a]">svcRtxThreadTerminate</a> from rtx_thread.o(.text.svcRtxThreadTerminate) referenced from rtx_thread.o(.text.osThreadTerminate)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[88]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[8e]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[90]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[143]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[144]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[145]"></a>__decompress</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[146]"></a>__decompress0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[147]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[99]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[91]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[148]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[149]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[14a]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[14b]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[93]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[14c]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[14d]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[14e]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[14f]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[150]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[151]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[152]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[153]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[154]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[155]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[156]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[157]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[158]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[159]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[15a]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[15b]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[9e]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[15c]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[15d]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[15e]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[15f]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[160]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[161]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[162]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[8f]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[163]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[94]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[96]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000008))
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[98]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[9a]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Task::Task__sub_object(const char*, unsigned long long*, unsigned, osPriority_t)
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[164]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[ad]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[9d]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[165]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[9f]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[c]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[12]"></a>SVC_Handler</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, irq_cm4f.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>PendSV_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, irq_cm4f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PendSV_Handler &rArr; osRtxPendSV_Handler &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, irq_cm4f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; osRtxTick_Handler &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> startup_stm32f40_41xxx.o(RESET)
<LI> rtx_kernel.o(.text.svcRtxKernelStart)
</UL>
<P><STRONG><a name="[b1]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[a3]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[166]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[a5]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[167]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[168]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[16a]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[a7]"></a>__rt_SIGPVFN</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[16b]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>

<P><STRONG><a name="[a8]"></a>__rt_SIGPVFN_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>

<P><STRONG><a name="[a0]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[95]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[9c]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[aa]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
</UL>

<P><STRONG><a name="[ae]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[16e]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[16f]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>OS_Tick_AcknowledgeIRQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_AcknowledgeIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[d4]"></a>OS_Tick_Enable</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[d3]"></a>OS_Tick_GetIRQn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_GetIRQn))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[d2]"></a>OS_Tick_Setup</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_Setup))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[e6]"></a>osDelay</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_delay.o(.text.osDelay))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatusUpdateTask::run()
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainEvent::exec(BaseOutput&)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPushNext(unsigned)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPushBack(unsigned)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xDropOut(unsigned)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xRotationToOpen2(unsigned)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xRotationToClose(unsigned)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox5Toggle(unsigned)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox4Toggle(unsigned)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox3Toggle(unsigned)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox2Toggle(unsigned)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox1Toggle(unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xRotationToOpen(unsigned)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox5Test(unsigned)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox4Test(unsigned)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox3Test(unsigned)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox2Test(unsigned)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox1Test(unsigned)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xStepToOrigin()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xStepForSteps(unsigned)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xYAxisToDown(unsigned)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xYAxisToUp(unsigned)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vYAxisUp()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vStepToOrigin()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vRotateTo1()
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainEvent::deliver(BaseOutput&, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeliverManager::deliver(const DeliverObject&, DeliverListener*)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::testElectorLock()
</UL>

<P><STRONG><a name="[142]"></a>osKernelGetState</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelGetState), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>

<P><STRONG><a name="[140]"></a>osKernelInitialize</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelInitialize))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[141]"></a>osKernelStart</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelStart))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[af]"></a>osMessageQueueGet</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.osMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osMessageQueueGet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverTask::run()
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogTask::run()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[ce]"></a>osMessageQueueNew</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_msgqueue.o(.text.osMessageQueueNew))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receiver::Receiver(const char*, unsigned long long*, unsigned, unsigned)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[b3]"></a>osMessageQueuePut</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.osMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osMessageQueuePut &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[12b]"></a>osMutexAcquire</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osMutexAcquire))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogUart::write(const unsigned char*, unsigned)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainUart::write(const unsigned char*, unsigned short)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>

<P><STRONG><a name="[13f]"></a>osMutexDelete</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osMutexDelete), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
</UL>

<P><STRONG><a name="[126]"></a>osMutexNew</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osMutexNew))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sender::Sender(const char*)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>

<P><STRONG><a name="[12d]"></a>osMutexRelease</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osMutexRelease))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogUart::write(const unsigned char*, unsigned)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainUart::write(const unsigned char*, unsigned short)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
</UL>

<P><STRONG><a name="[d5]"></a>osRtxMemoryAlloc</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, rtx_memory.o(.text.osRtxMemoryAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[c4]"></a>osRtxMemoryFree</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, rtx_memory.o(.text.osRtxMemoryFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
</UL>

<P><STRONG><a name="[7b]"></a>osRtxMemoryInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, rtx_memory.o(.text.osRtxMemoryInit))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.svcRtxKernelInitialize)
</UL>
<P><STRONG><a name="[b4]"></a>osRtxMemoryPoolAlloc</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, rtx_mempool.o(.text.osRtxMemoryPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryPoolAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[b6]"></a>osRtxMemoryPoolFree</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, rtx_mempool.o(.text.osRtxMemoryPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryPoolFree
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
</UL>

<P><STRONG><a name="[d1]"></a>osRtxMemoryPoolInit</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, rtx_mempool.o(.text.osRtxMemoryPoolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxMemoryPoolInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[bb]"></a>osRtxMutexOwnerRelease</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, rtx_mutex.o(.text.osRtxMutexOwnerRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[a1]"></a>osRtxPendSV_Handler</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, rtx_system.o(.text.osRtxPendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxPendSV_Handler &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[b2]"></a>osRtxPostProcess</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, rtx_system.o(.text.osRtxPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[be]"></a>osRtxThreadDelayTick</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadDelayTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadDelayTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[bc]"></a>osRtxThreadDispatch</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadDispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadBlock
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[b7]"></a>osRtxThreadListGet</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListGet))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[c6]"></a>osRtxThreadListPut</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListPut))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
</UL>

<P><STRONG><a name="[bf]"></a>osRtxThreadListRemove</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[c5]"></a>osRtxThreadListSort</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadListSort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadListSort
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[c0]"></a>osRtxThreadReadyPut</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadReadyPut))
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[b9]"></a>osRtxThreadRegPtr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadRegPtr))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[c8]"></a>osRtxThreadStackCheck</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadStackCheck))
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>

<P><STRONG><a name="[c9]"></a>osRtxThreadStartup</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadStartup))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[c2]"></a>osRtxThreadSwitch</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadSwitch))
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>

<P><STRONG><a name="[ca]"></a>osRtxThreadWaitEnter</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadWaitEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayInsert
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
</UL>

<P><STRONG><a name="[b8]"></a>osRtxThreadWaitExit</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadWaitExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[a2]"></a>osRtxTick_Handler</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, rtx_system.o(.text.osRtxTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxTick_Handler &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_AcknowledgeIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[76]"></a>osRtxTimerThread</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, rtx_timer.o(.text.osRtxTimerThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osRtxTimerThread &rArr; osMessageQueueGet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osRtxThreadStartup)
</UL>
<P><STRONG><a name="[7d]"></a>osThreadExit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadExit))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task::startFunction(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[10d]"></a>osThreadNew</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadNew))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task::start()
</UL>

<P><STRONG><a name="[10c]"></a>osThreadTerminate</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadTerminate))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task::start()
</UL>

<P><STRONG><a name="[68]"></a>SystemInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(.text)
</UL>
<P><STRONG><a name="[4a]"></a>UART4_IRQHandler</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, mainuart.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART4_IRQHandler &rArr; osMessageQueuePut &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainUart::MainUart()
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USART3_IRQHandler</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, loguart.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USART3_IRQHandler &rArr; osMessageQueuePut &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogUart::LogUart()
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[db]"></a>BaseOutput::buildAndWrite()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, baseoutput.o(i._ZN10BaseOutput13buildAndWriteEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BaseOutput::buildAndWrite() &rArr; BaseOutput::build(unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseOutput::build(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatusUpdateTask::run()
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainEvent::deliver(BaseOutput&, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[13a]"></a>BaseOutput::ack()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, baseoutput.o(i._ZN10BaseOutput3ackEv))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainEvent::exec(BaseOutput&)
</UL>

<P><STRONG><a name="[13c]"></a>BaseOutput::nck()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, baseoutput.o(i._ZN10BaseOutput3nckEv))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainEvent::exec(BaseOutput&)
</UL>

<P><STRONG><a name="[dc]"></a>BaseOutput::build(unsigned char*)</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, baseoutput.o(i._ZN10BaseOutput5buildEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BaseOutput::build(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseOutput::buildAndWrite()
</UL>

<P><STRONG><a name="[109]"></a>BaseOutput::append1(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, statusupdatetask.o(i._ZN10BaseOutput7append1Eh))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatusUpdateTask::run()
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainEvent::deliver(BaseOutput&, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[13d]"></a>BaseOutput::setAction(unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mainevent.o(i._ZN10BaseOutput9setActionEh))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainEvent::deliver(BaseOutput&, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[dd]"></a>CurrentAdc::instance()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, motormanager.o(i._ZN10CurrentAdc8instanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CurrentAdc::instance() &rArr; CurrentAdc::CurrentAdc()
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentAdc::CurrentAdc()
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::isPushLrt()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::isDoorLrt()
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xDropOut(unsigned)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::isYAxisLrt()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::isPowerLrt()
</UL>

<P><STRONG><a name="[e0]"></a>CurrentAdc::xGetValue()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, currentadc.o(i._ZN10CurrentAdc9xGetValueEv))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::isPushLrt()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::isDoorLrt()
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xDropOut(unsigned)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::isYAxisLrt()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::isPowerLrt()
</UL>

<P><STRONG><a name="[de]"></a>CurrentAdc::CurrentAdc()</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, currentadc.o(i._ZN10CurrentAdcC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CurrentAdc::CurrentAdc()
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask::run()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentAdc::instance()
</UL>

<P><STRONG><a name="[172]"></a>CurrentAdc::CurrentAdc__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, currentadc.o(i._ZN10CurrentAdcC1Ev), UNUSED)

<P><STRONG><a name="[df]"></a>MotorManager::isPowerLrt()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, motormanager.o(i._ZN12MotorManager10isPowerLrtEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MotorManager::isPowerLrt() &rArr; CurrentAdc::instance() &rArr; CurrentAdc::CurrentAdc()
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentAdc::xGetValue()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentAdc::instance()
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox5Toggle(unsigned)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox4Toggle(unsigned)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox3Toggle(unsigned)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox2Toggle(unsigned)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox1Toggle(unsigned)
</UL>

<P><STRONG><a name="[e1]"></a>MotorManager::isYAxisLrt()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, motormanager.o(i._ZN12MotorManager10isYAxisLrtEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MotorManager::isYAxisLrt() &rArr; CurrentAdc::instance() &rArr; CurrentAdc::CurrentAdc()
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentAdc::xGetValue()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentAdc::instance()
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xYAxisToDown(unsigned)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xYAxisToUp(unsigned)
</UL>

<P><STRONG><a name="[e2]"></a>MotorManager::xStepForMm(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, logevent.o(i._ZN12MotorManager10xStepForMmEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MotorManager::xStepForMm(unsigned) &rArr; MotorManager::xStepForSteps(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xStepForSteps(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainEvent::deliver(BaseOutput&, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeliverManager::deliver(const DeliverObject&, DeliverListener*)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::testStepMotor()
</UL>

<P><STRONG><a name="[e4]"></a>MotorManager::xYAxisToUp(unsigned)</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, motormanager.o(i._ZN12MotorManager10xYAxisToUpEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MotorManager::xYAxisToUp(unsigned) &rArr; MotorManager::isYAxisLrt() &rArr; CurrentAdc::instance() &rArr; CurrentAdc::CurrentAdc()
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::vSetDir(MotorManager::Dir)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::isYAxisLrt()
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xStepToOrigin()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::testYAxisMotor()
</UL>

<P><STRONG><a name="[e8]"></a>MotorManager::vStepSetDir(MotorManager::Dir)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, motormanager.o(i._ZN12MotorManager11vStepSetDirENS_3DirE))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xStepToOrigin()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xStepForSteps(unsigned)
</UL>

<P><STRONG><a name="[e7]"></a>MotorManager::xYAxisToDown(unsigned)</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, motormanager.o(i._ZN12MotorManager12xYAxisToDownEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MotorManager::xYAxisToDown(unsigned) &rArr; MotorManager::isYAxisLrt() &rArr; CurrentAdc::instance() &rArr; CurrentAdc::CurrentAdc()
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::vSetDir(MotorManager::Dir)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::isYAxisLrt()
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainEvent::deliver(BaseOutput&, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeliverManager::deliver(const DeliverObject&, DeliverListener*)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::testYAxisMotor()
</UL>

<P><STRONG><a name="[e3]"></a>MotorManager::xStepForSteps(unsigned)</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, motormanager.o(i._ZN12MotorManager13xStepForStepsEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MotorManager::xStepForSteps(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::vStepSetDir(MotorManager::Dir)
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::testStepMotor()
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xStepForMm(unsigned)
</UL>

<P><STRONG><a name="[e9]"></a>MotorManager::xStepToOrigin()</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, motormanager.o(i._ZN12MotorManager13xStepToOriginEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MotorManager::xStepToOrigin() &rArr; MotorManager::xYAxisToUp(unsigned) &rArr; MotorManager::isYAxisLrt() &rArr; CurrentAdc::instance() &rArr; CurrentAdc::CurrentAdc()
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::vStepSetDir(MotorManager::Dir)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xYAxisToUp(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::MotorManager()
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainEvent::deliver(BaseOutput&, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeliverManager::deliver(const DeliverObject&, DeliverListener*)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::testStepMotor()
</UL>

<P><STRONG><a name="[ea]"></a>MotorManager::xPowerBox1Test(unsigned)</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, motormanager.o(i._ZN12MotorManager14xPowerBox1TestEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MotorManager::xPowerBox1Test(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::vSetDir(MotorManager::Dir)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::isPowerBox1Checked()
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::testPowerBoxMotor()
</UL>

<P><STRONG><a name="[ec]"></a>MotorManager::xPowerBox2Test(unsigned)</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, motormanager.o(i._ZN12MotorManager14xPowerBox2TestEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MotorManager::xPowerBox2Test(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::vSetDir(MotorManager::Dir)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::isPowerBox2Checked()
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::testPowerBoxMotor()
</UL>

<P><STRONG><a name="[ee]"></a>MotorManager::xPowerBox3Test(unsigned)</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, motormanager.o(i._ZN12MotorManager14xPowerBox3TestEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MotorManager::xPowerBox3Test(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::vSetDir(MotorManager::Dir)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::isPowerBox3Checked()
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::testPowerBoxMotor()
</UL>

<P><STRONG><a name="[f0]"></a>MotorManager::xPowerBox4Test(unsigned)</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, motormanager.o(i._ZN12MotorManager14xPowerBox4TestEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MotorManager::xPowerBox4Test(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::vSetDir(MotorManager::Dir)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::isPowerBox4Checked()
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::testPowerBoxMotor()
</UL>

<P><STRONG><a name="[f2]"></a>MotorManager::xPowerBox5Test(unsigned)</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, motormanager.o(i._ZN12MotorManager14xPowerBox5TestEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MotorManager::xPowerBox5Test(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::vSetDir(MotorManager::Dir)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::isPowerBox5Checked()
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::testPowerBoxMotor()
</UL>

<P><STRONG><a name="[f4]"></a>MotorManager::xRotationToOpen(unsigned)</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, motormanager.o(i._ZN12MotorManager15xRotationToOpenEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MotorManager::xRotationToOpen(unsigned) &rArr; MotorManager::isDoorLrt() &rArr; CurrentAdc::instance() &rArr; CurrentAdc::CurrentAdc()
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::isDoorLrt()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::vSetDir(MotorManager::Dir)
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainEvent::deliver(BaseOutput&, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeliverManager::deliver(const DeliverObject&, DeliverListener*)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::testRotationMotor()
</UL>

<P><STRONG><a name="[f6]"></a>MotorManager::xPowerBox1Toggle(unsigned)</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, motormanager.o(i._ZN12MotorManager16xPowerBox1ToggleEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MotorManager::xPowerBox1Toggle(unsigned) &rArr; MotorManager::isPowerLrt() &rArr; CurrentAdc::instance() &rArr; CurrentAdc::CurrentAdc()
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::vSetDir(MotorManager::Dir)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::isPowerBox1Checked()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::isPowerLrt()
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainEvent::deliver(BaseOutput&, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeliverManager::deliver(const DeliverObject&, DeliverListener*)
</UL>

<P><STRONG><a name="[f7]"></a>MotorManager::xPowerBox2Toggle(unsigned)</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, motormanager.o(i._ZN12MotorManager16xPowerBox2ToggleEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MotorManager::xPowerBox2Toggle(unsigned) &rArr; MotorManager::isPowerLrt() &rArr; CurrentAdc::instance() &rArr; CurrentAdc::CurrentAdc()
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::vSetDir(MotorManager::Dir)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::isPowerBox2Checked()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::isPowerLrt()
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainEvent::deliver(BaseOutput&, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeliverManager::deliver(const DeliverObject&, DeliverListener*)
</UL>

<P><STRONG><a name="[f8]"></a>MotorManager::xPowerBox3Toggle(unsigned)</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, motormanager.o(i._ZN12MotorManager16xPowerBox3ToggleEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MotorManager::xPowerBox3Toggle(unsigned) &rArr; MotorManager::isPowerLrt() &rArr; CurrentAdc::instance() &rArr; CurrentAdc::CurrentAdc()
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::vSetDir(MotorManager::Dir)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::isPowerBox3Checked()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::isPowerLrt()
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainEvent::deliver(BaseOutput&, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeliverManager::deliver(const DeliverObject&, DeliverListener*)
</UL>

<P><STRONG><a name="[f9]"></a>MotorManager::xPowerBox4Toggle(unsigned)</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, motormanager.o(i._ZN12MotorManager16xPowerBox4ToggleEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MotorManager::xPowerBox4Toggle(unsigned) &rArr; MotorManager::isPowerLrt() &rArr; CurrentAdc::instance() &rArr; CurrentAdc::CurrentAdc()
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::vSetDir(MotorManager::Dir)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::isPowerBox4Checked()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::isPowerLrt()
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainEvent::deliver(BaseOutput&, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeliverManager::deliver(const DeliverObject&, DeliverListener*)
</UL>

<P><STRONG><a name="[fa]"></a>MotorManager::xPowerBox5Toggle(unsigned)</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, motormanager.o(i._ZN12MotorManager16xPowerBox5ToggleEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MotorManager::xPowerBox5Toggle(unsigned) &rArr; MotorManager::isPowerLrt() &rArr; CurrentAdc::instance() &rArr; CurrentAdc::CurrentAdc()
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::vSetDir(MotorManager::Dir)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::isPowerBox5Checked()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::isPowerLrt()
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainEvent::deliver(BaseOutput&, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeliverManager::deliver(const DeliverObject&, DeliverListener*)
</UL>

<P><STRONG><a name="[fb]"></a>MotorManager::xRotationToClose(unsigned)</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, motormanager.o(i._ZN12MotorManager16xRotationToCloseEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MotorManager::xRotationToClose(unsigned) &rArr; MotorManager::isDoorLrt() &rArr; CurrentAdc::instance() &rArr; CurrentAdc::CurrentAdc()
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::isDoorLrt()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::vSetDir(MotorManager::Dir)
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::MotorManager()
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainEvent::deliver(BaseOutput&, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeliverManager::deliver(const DeliverObject&, DeliverListener*)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::testRotationMotor()
</UL>

<P><STRONG><a name="[fc]"></a>MotorManager::xRotationToOpen2(unsigned)</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, motormanager.o(i._ZN12MotorManager16xRotationToOpen2Ej))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MotorManager::xRotationToOpen2(unsigned) &rArr; MotorManager::isDoorLrt() &rArr; CurrentAdc::instance() &rArr; CurrentAdc::CurrentAdc()
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::isDoorLrt()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::vSetDir(MotorManager::Dir)
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainEvent::deliver(BaseOutput&, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[eb]"></a>MotorManager::isPowerBox1Checked()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, motormanager.o(i._ZN12MotorManager18isPowerBox1CheckedEv))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox1Toggle(unsigned)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox1Test(unsigned)
</UL>

<P><STRONG><a name="[ed]"></a>MotorManager::isPowerBox2Checked()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, motormanager.o(i._ZN12MotorManager18isPowerBox2CheckedEv))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox2Toggle(unsigned)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox2Test(unsigned)
</UL>

<P><STRONG><a name="[ef]"></a>MotorManager::isPowerBox3Checked()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, motormanager.o(i._ZN12MotorManager18isPowerBox3CheckedEv))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox3Toggle(unsigned)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox3Test(unsigned)
</UL>

<P><STRONG><a name="[f1]"></a>MotorManager::isPowerBox4Checked()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, motormanager.o(i._ZN12MotorManager18isPowerBox4CheckedEv))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox4Toggle(unsigned)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox4Test(unsigned)
</UL>

<P><STRONG><a name="[f3]"></a>MotorManager::isPowerBox5Checked()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, motormanager.o(i._ZN12MotorManager18isPowerBox5CheckedEv))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox5Toggle(unsigned)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox5Test(unsigned)
</UL>

<P><STRONG><a name="[e5]"></a>MotorManager::vSetDir(MotorManager::Dir)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, motormanager.o(i._ZN12MotorManager7vSetDirENS_3DirE))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainEvent::exec(BaseOutput&)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPushNext(unsigned)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPushBack(unsigned)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xDropOut(unsigned)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xRotationToOpen2(unsigned)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xRotationToClose(unsigned)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox5Toggle(unsigned)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox4Toggle(unsigned)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox3Toggle(unsigned)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox2Toggle(unsigned)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox1Toggle(unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xRotationToOpen(unsigned)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox5Test(unsigned)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox4Test(unsigned)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox3Test(unsigned)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox2Test(unsigned)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox1Test(unsigned)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xYAxisToDown(unsigned)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xYAxisToUp(unsigned)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::testElectorLock()
</UL>

<P><STRONG><a name="[fd]"></a>MotorManager::instance()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(i._ZN12MotorManager8instanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MotorManager::instance() &rArr; MotorManager::MotorManager() &rArr; MotorManager::xStepToOrigin() &rArr; MotorManager::xYAxisToUp(unsigned) &rArr; MotorManager::isYAxisLrt() &rArr; CurrentAdc::instance() &rArr; CurrentAdc::CurrentAdc()
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::MotorManager()
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainEvent::exec(BaseOutput&)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask::run()
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogTask::run()
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainEvent::deliver(BaseOutput&, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::testRotationMotor()
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::testPowerBoxMotor()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::testElectorLock()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::testYAxisMotor()
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::testStepMotor()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::testPushMotor()
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::testDropMotor()
</UL>

<P><STRONG><a name="[ff]"></a>MotorManager::xDropOut(unsigned)</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, motormanager.o(i._ZN12MotorManager8xDropOutEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MotorManager::xDropOut(unsigned) &rArr; CurrentAdc::instance() &rArr; CurrentAdc::CurrentAdc()
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentAdc::xGetValue()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::vSetDir(MotorManager::Dir)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentAdc::instance()
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainEvent::deliver(BaseOutput&, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeliverManager::deliver(const DeliverObject&, DeliverListener*)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::testDropMotor()
</UL>

<P><STRONG><a name="[f5]"></a>MotorManager::isDoorLrt()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, motormanager.o(i._ZN12MotorManager9isDoorLrtEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MotorManager::isDoorLrt() &rArr; CurrentAdc::instance() &rArr; CurrentAdc::CurrentAdc()
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentAdc::xGetValue()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentAdc::instance()
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xRotationToOpen2(unsigned)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xRotationToClose(unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xRotationToOpen(unsigned)
</UL>

<P><STRONG><a name="[100]"></a>MotorManager::isPushLrt()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, motormanager.o(i._ZN12MotorManager9isPushLrtEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MotorManager::isPushLrt() &rArr; CurrentAdc::instance() &rArr; CurrentAdc::CurrentAdc()
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentAdc::xGetValue()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentAdc::instance()
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPushNext(unsigned)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPushBack(unsigned)
</UL>

<P><STRONG><a name="[103]"></a>MotorManager::vInitGpio()</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, motormanager.o(i._ZN12MotorManager9vInitGpioEv))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::MotorManager()
</UL>

<P><STRONG><a name="[101]"></a>MotorManager::xPushBack(unsigned)</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, motormanager.o(i._ZN12MotorManager9xPushBackEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MotorManager::xPushBack(unsigned) &rArr; MotorManager::isPushLrt() &rArr; CurrentAdc::instance() &rArr; CurrentAdc::CurrentAdc()
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::isPushLrt()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::vSetDir(MotorManager::Dir)
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainEvent::deliver(BaseOutput&, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::testPushMotor()
</UL>

<P><STRONG><a name="[102]"></a>MotorManager::xPushNext(unsigned)</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, motormanager.o(i._ZN12MotorManager9xPushNextEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MotorManager::xPushNext(unsigned) &rArr; MotorManager::isPushLrt() &rArr; CurrentAdc::instance() &rArr; CurrentAdc::CurrentAdc()
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::isPushLrt()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::vSetDir(MotorManager::Dir)
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainEvent::deliver(BaseOutput&, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeliverManager::deliver(const DeliverObject&, DeliverListener*)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::testPushMotor()
</UL>

<P><STRONG><a name="[fe]"></a>MotorManager::MotorManager()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, motormanager.o(i._ZN12MotorManagerC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MotorManager::MotorManager() &rArr; MotorManager::xStepToOrigin() &rArr; MotorManager::xYAxisToUp(unsigned) &rArr; MotorManager::isYAxisLrt() &rArr; CurrentAdc::instance() &rArr; CurrentAdc::CurrentAdc()
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::vInitGpio()
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xRotationToClose(unsigned)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xStepToOrigin()
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatusUpdateTask::run()
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::instance()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeliverManager::deliver(const DeliverObject&, DeliverListener*)
</UL>

<P><STRONG><a name="[173]"></a>MotorManager::MotorManager__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, motormanager.o(i._ZN12MotorManagerC1Ev), UNUSED)

<P><STRONG><a name="[80]"></a>ReceiverTask::run()</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, receivertask.o(i._ZN12ReceiverTask3runEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ReceiverTask::run() &rArr; MainEvent::exec(BaseOutput&) &rArr; MainEvent::deliver(BaseOutput&, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; MotorManager::instance() &rArr; MotorManager::MotorManager() &rArr; MotorManager::xStepToOrigin() &rArr; MotorManager::xYAxisToUp(unsigned) &rArr; MotorManager::isYAxisLrt() &rArr; CurrentAdc::instance() &rArr; CurrentAdc::CurrentAdc()
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainEvent::exec(BaseOutput&)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainUart::MainUart()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event::Event()
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Address Reference Count : 1]<UL><LI> receivertask.o(.constdata__ZTV12ReceiverTask)
</UL>
<P><STRONG><a name="[106]"></a>ReceiverTask::ReceiverTask()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, receivertask.o(i._ZN12ReceiverTaskC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ReceiverTask::ReceiverTask() &rArr; Task::Task__sub_object(const char*, unsigned long long*, unsigned, osPriority_t)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task::Task__sub_object(const char*, unsigned long long*, unsigned, osPriority_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask::run()
</UL>

<P><STRONG><a name="[174]"></a>ReceiverTask::ReceiverTask__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, receivertask.o(i._ZN12ReceiverTaskC1Ev), UNUSED)

<P><STRONG><a name="[130]"></a>DeliverObject::DeliverObject(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, deliverobject.o(i._ZN13DeliverObjectC1Ehhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DeliverObject::DeliverObject(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::testDeliver()
</UL>

<P><STRONG><a name="[175]"></a>DeliverObject::DeliverObject__sub_object(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, deliverobject.o(i._ZN13DeliverObjectC1Ehhhhh), UNUSED)

<P><STRONG><a name="[108]"></a>DeliverManager::deliver(const DeliverObject&, DeliverListener*)</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, delivermanager.o(i._ZN14DeliverManager7deliverERK13DeliverObjectP15DeliverListener))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DeliverManager::deliver(const DeliverObject&, DeliverListener*) &rArr; MotorManager::MotorManager() &rArr; MotorManager::xStepToOrigin() &rArr; MotorManager::xYAxisToUp(unsigned) &rArr; MotorManager::isYAxisLrt() &rArr; CurrentAdc::instance() &rArr; CurrentAdc::CurrentAdc()
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::MotorManager()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPushNext(unsigned)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xDropOut(unsigned)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xRotationToClose(unsigned)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox5Toggle(unsigned)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox4Toggle(unsigned)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox3Toggle(unsigned)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox2Toggle(unsigned)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox1Toggle(unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xRotationToOpen(unsigned)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xStepToOrigin()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xYAxisToDown(unsigned)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xStepForMm(unsigned)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::testDeliver()
</UL>

<P><STRONG><a name="[131]"></a>DeliverManager::DeliverManager()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, delivermanager.o(i._ZN14DeliverManagerC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::testDeliver()
</UL>

<P><STRONG><a name="[176]"></a>DeliverManager::DeliverManager__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, delivermanager.o(i._ZN14DeliverManagerC1Ev), UNUSED)

<P><STRONG><a name="[81]"></a>StatusUpdateTask::run()</STRONG> (Thumb, 278 bytes, Stack size 0 bytes, statusupdatetask.o(i._ZN16StatusUpdateTask3runEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = StatusUpdateTask::run() &rArr; MotorManager::MotorManager() &rArr; MotorManager::xStepToOrigin() &rArr; MotorManager::xYAxisToUp(unsigned) &rArr; MotorManager::isYAxisLrt() &rArr; CurrentAdc::instance() &rArr; CurrentAdc::CurrentAdc()
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseOutput::buildAndWrite()
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseOutput::append1(unsigned char)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainUart::MainUart()
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::MotorManager()
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statusupdatetask.o(.constdata__ZTV16StatusUpdateTask)
</UL>
<P><STRONG><a name="[10a]"></a>StatusUpdateTask::StatusUpdateTask()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, statusupdatetask.o(i._ZN16StatusUpdateTaskC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = StatusUpdateTask::StatusUpdateTask() &rArr; Task::Task__sub_object(const char*, unsigned long long*, unsigned, osPriority_t)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task::Task__sub_object(const char*, unsigned long long*, unsigned, osPriority_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask::run()
</UL>

<P><STRONG><a name="[177]"></a>StatusUpdateTask::StatusUpdateTask__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, statusupdatetask.o(i._ZN16StatusUpdateTaskC1Ev), UNUSED)

<P><STRONG><a name="[7f]"></a>Task::startFunction(void*)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, task.o(i._ZN4Task13startFunctionEPv))
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(i._ZN4Task5startEv)
</UL>
<P><STRONG><a name="[10b]"></a>Task::start()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, task.o(i._ZN4Task5startEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Task::start()
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask::run()
</UL>

<P><STRONG><a name="[107]"></a>Task::Task__sub_object(const char*, unsigned long long*, unsigned, osPriority_t)</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, task.o(i._ZN4TaskC2EPKcPyj12osPriority_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Task::Task__sub_object(const char*, unsigned long long*, unsigned, osPriority_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatusUpdateTask::StatusUpdateTask()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverTask::ReceiverTask()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask::run()
</UL>

<P><STRONG><a name="[10f]"></a>Event::xorCheckSum()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, event.o(i._ZN5Event11xorCheckSumEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Event::xorCheckSum()
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event::isCorrect()
</UL>

<P><STRONG><a name="[127]"></a>Event::getAck(unsigned char*)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, event.o(i._ZN5Event6getAckEPh))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogTask::run()
</UL>

<P><STRONG><a name="[10e]"></a>Event::isCorrect()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, event.o(i._ZN5Event9isCorrectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Event::isCorrect() &rArr; Event::xorCheckSum()
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event::xorCheckSum()
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainEvent::exec(BaseOutput&)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogTask::run()
</UL>

<P><STRONG><a name="[104]"></a>Event::Event()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, event.o(i._ZN5EventC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_LogUart_cpp_f947086d
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverTask::run()
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogTask::run()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_MainUart_cpp_f0dc2c7d
</UL>

<P><STRONG><a name="[178]"></a>Event::Event__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, event.o(i._ZN5EventC1Ev), UNUSED)

<P><STRONG><a name="[110]"></a>Motor::vDropOutOn(Motor::Dir)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, logevent.o(i._ZN5Motor10vDropOutOnENS_3DirE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Motor::vDropOutOn(Motor::Dir)
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vSetDir(Motor::Dir)
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::testDropMotor()
</UL>

<P><STRONG><a name="[112]"></a>Motor::vRotateOff()</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, motor.o(i._ZN5Motor10vRotateOffEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Motor::vRotateOff()
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vSetDir(Motor::Dir)
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vRotateTo1()
</UL>

<P><STRONG><a name="[113]"></a>Motor::vRotateTo1()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, motor.o(i._ZN5Motor10vRotateTo1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Motor::vRotateTo1() &rArr; Motor::vRotateOn(Motor::Dir)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vRotateOn(Motor::Dir)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vRotateOff()
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor()
</UL>

<P><STRONG><a name="[115]"></a>Motor::vDropOutOff()</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, motor.o(i._ZN5Motor11vDropOutOffEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Motor::vDropOutOff()
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vSetDir(Motor::Dir)
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor()
</UL>

<P><STRONG><a name="[11e]"></a>Motor::vStepSetDir(Motor::Dir)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, motor.o(i._ZN5Motor11vStepSetDirENS_3DirE))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vStepToOrigin()
</UL>

<P><STRONG><a name="[116]"></a>Motor::vPowerBox1Off()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, motor.o(i._ZN5Motor13vPowerBox1OffEv))
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vSetDir(Motor::Dir)
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor()
</UL>

<P><STRONG><a name="[117]"></a>Motor::vPowerBox2Off()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, motor.o(i._ZN5Motor13vPowerBox2OffEv))
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vSetDir(Motor::Dir)
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor()
</UL>

<P><STRONG><a name="[118]"></a>Motor::vPowerBox3Off()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, motor.o(i._ZN5Motor13vPowerBox3OffEv))
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vSetDir(Motor::Dir)
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor()
</UL>

<P><STRONG><a name="[119]"></a>Motor::vPowerBox4Off()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, motor.o(i._ZN5Motor13vPowerBox4OffEv))
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vSetDir(Motor::Dir)
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor()
</UL>

<P><STRONG><a name="[11a]"></a>Motor::vPowerBox5Off()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, motor.o(i._ZN5Motor13vPowerBox5OffEv))
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vSetDir(Motor::Dir)
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor()
</UL>

<P><STRONG><a name="[11b]"></a>Motor::vStepToOrigin()</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, motor.o(i._ZN5Motor13vStepToOriginEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Motor::vStepToOrigin() &rArr; Motor::vYAxisUp() &rArr; Motor::vYAxisOff()
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vYAxisUp()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vStepSetEnable(bool)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vStepSetDir(Motor::Dir)
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor()
</UL>

<P><STRONG><a name="[11d]"></a>Motor::vStepSetEnable(bool)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, motor.o(i._ZN5Motor14vStepSetEnableEb))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vStepToOrigin()
</UL>

<P><STRONG><a name="[111]"></a>Motor::vSetDir(Motor::Dir)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, motor.o(i._ZN5Motor7vSetDirENS_3DirE))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vYAxisOff()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vRotateOn(Motor::Dir)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vYAxisOn(Motor::Dir)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vPushOff()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vPowerBox5Off()
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vPowerBox4Off()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vPowerBox3Off()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vPowerBox2Off()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vPowerBox1Off()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vDropOutOff()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vRotateOff()
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::testRotationMotor()
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::testDropMotor()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vDropOutOn(Motor::Dir)
</UL>

<P><STRONG><a name="[11f]"></a>Motor::instance()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, logevent.o(i._ZN5Motor8instanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Motor::instance() &rArr; Motor::Motor() &rArr; Motor::vStepToOrigin() &rArr; Motor::vYAxisUp() &rArr; Motor::vYAxisOff()
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor()
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::testRotationMotor()
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::testDropMotor()
</UL>

<P><STRONG><a name="[121]"></a>Motor::vPushOff()</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, motor.o(i._ZN5Motor8vPushOffEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Motor::vPushOff()
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vSetDir(Motor::Dir)
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor()
</UL>

<P><STRONG><a name="[122]"></a>Motor::vYAxisOn(Motor::Dir)</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, motor.o(i._ZN5Motor8vYAxisOnENS_3DirE))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Motor::vYAxisOn(Motor::Dir)
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vSetDir(Motor::Dir)
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vYAxisUp()
</UL>

<P><STRONG><a name="[11c]"></a>Motor::vYAxisUp()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, motor.o(i._ZN5Motor8vYAxisUpEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Motor::vYAxisUp() &rArr; Motor::vYAxisOff()
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vYAxisOff()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vYAxisOn(Motor::Dir)
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vStepToOrigin()
</UL>

<P><STRONG><a name="[114]"></a>Motor::vRotateOn(Motor::Dir)</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, motor.o(i._ZN5Motor9vRotateOnENS_3DirE))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Motor::vRotateOn(Motor::Dir)
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vSetDir(Motor::Dir)
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vRotateTo1()
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::testRotationMotor()
</UL>

<P><STRONG><a name="[123]"></a>Motor::vYAxisOff()</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, motor.o(i._ZN5Motor9vYAxisOffEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Motor::vYAxisOff()
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vSetDir(Motor::Dir)
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vYAxisUp()
</UL>

<P><STRONG><a name="[120]"></a>Motor::Motor()</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, motor.o(i._ZN5MotorC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Motor::Motor() &rArr; Motor::vStepToOrigin() &rArr; Motor::vYAxisUp() &rArr; Motor::vYAxisOff()
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initGpio()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vYAxisOff()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vPushOff()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vSetDir(Motor::Dir)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vStepToOrigin()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vPowerBox5Off()
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vPowerBox4Off()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vPowerBox3Off()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vPowerBox2Off()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vPowerBox1Off()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vDropOutOff()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vRotateTo1()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vRotateOff()
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::instance()
</UL>

<P><STRONG><a name="[179]"></a>Motor::Motor__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, motor.o(i._ZN5MotorC1Ev), UNUSED)

<P><STRONG><a name="[125]"></a>Sender::Sender(const char*)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sender.o(i._ZN6SenderC1EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sender::Sender(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainUart::MainUart()
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogUart::LogUart()
</UL>

<P><STRONG><a name="[17a]"></a>Sender::Sender__sub_object(const char*)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, sender.o(i._ZN6SenderC1EPKc), UNUSED)

<P><STRONG><a name="[83]"></a>LogTask::run()</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, main.o(i._ZN7LogTask3runEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LogTask::run() &rArr; LogEvent::test() &rArr; LogEvent::testDeliver() &rArr; DeliverManager::deliver(const DeliverObject&, DeliverListener*) &rArr; MotorManager::MotorManager() &rArr; MotorManager::xStepToOrigin() &rArr; MotorManager::xYAxisToUp(unsigned) &rArr; MotorManager::isYAxisLrt() &rArr; CurrentAdc::instance() &rArr; CurrentAdc::CurrentAdc()
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::error()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::test()
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogUart::LogUart()
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogUart::write(const unsigned char*, unsigned)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event::Event()
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event::isCorrect()
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event::getAck(unsigned char*)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::instance()
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTV7LogTask)
</UL>
<P><STRONG><a name="[128]"></a>LogUart::write(const unsigned char*, unsigned)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, loguart.o(i._ZN7LogUart5writeEPKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LogUart::write(const unsigned char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogUart::write(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogTask::run()
</UL>

<P><STRONG><a name="[12c]"></a>LogUart::write(unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, loguart.o(i._ZN7LogUart5writeEh))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogUart::write(const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[da]"></a>LogUart::LogUart()</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, loguart.o(i._ZN7LogUartC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LogUart::LogUart() &rArr; Receiver::Receiver(const char*, unsigned long long*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receiver::Receiver(const char*, unsigned long long*, unsigned, unsigned)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sender::Sender(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogTask::run()
</UL>

<P><STRONG><a name="[17b]"></a>LogUart::LogUart__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, loguart.o(i._ZN7LogUartC1Ev), UNUSED)

<P><STRONG><a name="[12f]"></a>LogEvent::testDeliver()</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, logevent.o(i._ZN8LogEvent11testDeliverEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LogEvent::testDeliver() &rArr; DeliverManager::deliver(const DeliverObject&, DeliverListener*) &rArr; MotorManager::MotorManager() &rArr; MotorManager::xStepToOrigin() &rArr; MotorManager::xYAxisToUp(unsigned) &rArr; MotorManager::isYAxisLrt() &rArr; CurrentAdc::instance() &rArr; CurrentAdc::CurrentAdc()
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeliverManager::DeliverManager()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeliverManager::deliver(const DeliverObject&, DeliverListener*)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeliverObject::DeliverObject(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::test()
</UL>

<P><STRONG><a name="[132]"></a>LogEvent::testDropMotor()</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, logevent.o(i._ZN8LogEvent13testDropMotorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LogEvent::testDropMotor() &rArr; MotorManager::instance() &rArr; MotorManager::MotorManager() &rArr; MotorManager::xStepToOrigin() &rArr; MotorManager::xYAxisToUp(unsigned) &rArr; MotorManager::isYAxisLrt() &rArr; CurrentAdc::instance() &rArr; CurrentAdc::CurrentAdc()
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::instance()
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xDropOut(unsigned)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vSetDir(Motor::Dir)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::instance()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vDropOutOn(Motor::Dir)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::test()
</UL>

<P><STRONG><a name="[133]"></a>LogEvent::testPushMotor()</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, logevent.o(i._ZN8LogEvent13testPushMotorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LogEvent::testPushMotor() &rArr; MotorManager::instance() &rArr; MotorManager::MotorManager() &rArr; MotorManager::xStepToOrigin() &rArr; MotorManager::xYAxisToUp(unsigned) &rArr; MotorManager::isYAxisLrt() &rArr; CurrentAdc::instance() &rArr; CurrentAdc::CurrentAdc()
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::instance()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPushNext(unsigned)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPushBack(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::test()
</UL>

<P><STRONG><a name="[134]"></a>LogEvent::testStepMotor()</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, logevent.o(i._ZN8LogEvent13testStepMotorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LogEvent::testStepMotor() &rArr; MotorManager::instance() &rArr; MotorManager::MotorManager() &rArr; MotorManager::xStepToOrigin() &rArr; MotorManager::xYAxisToUp(unsigned) &rArr; MotorManager::isYAxisLrt() &rArr; CurrentAdc::instance() &rArr; CurrentAdc::CurrentAdc()
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::instance()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xStepToOrigin()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xStepForSteps(unsigned)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xStepForMm(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::test()
</UL>

<P><STRONG><a name="[135]"></a>LogEvent::testYAxisMotor()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, logevent.o(i._ZN8LogEvent14testYAxisMotorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LogEvent::testYAxisMotor() &rArr; MotorManager::instance() &rArr; MotorManager::MotorManager() &rArr; MotorManager::xStepToOrigin() &rArr; MotorManager::xYAxisToUp(unsigned) &rArr; MotorManager::isYAxisLrt() &rArr; CurrentAdc::instance() &rArr; CurrentAdc::CurrentAdc()
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::instance()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xYAxisToDown(unsigned)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xYAxisToUp(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::test()
</UL>

<P><STRONG><a name="[136]"></a>LogEvent::testElectorLock()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, logevent.o(i._ZN8LogEvent15testElectorLockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LogEvent::testElectorLock() &rArr; MotorManager::instance() &rArr; MotorManager::MotorManager() &rArr; MotorManager::xStepToOrigin() &rArr; MotorManager::xYAxisToUp(unsigned) &rArr; MotorManager::isYAxisLrt() &rArr; CurrentAdc::instance() &rArr; CurrentAdc::CurrentAdc()
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::instance()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::vSetDir(MotorManager::Dir)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::test()
</UL>

<P><STRONG><a name="[137]"></a>LogEvent::testPowerBoxMotor()</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, logevent.o(i._ZN8LogEvent17testPowerBoxMotorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LogEvent::testPowerBoxMotor() &rArr; MotorManager::instance() &rArr; MotorManager::MotorManager() &rArr; MotorManager::xStepToOrigin() &rArr; MotorManager::xYAxisToUp(unsigned) &rArr; MotorManager::isYAxisLrt() &rArr; CurrentAdc::instance() &rArr; CurrentAdc::CurrentAdc()
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::instance()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox5Test(unsigned)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox4Test(unsigned)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox3Test(unsigned)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox2Test(unsigned)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox1Test(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::test()
</UL>

<P><STRONG><a name="[138]"></a>LogEvent::testRotationMotor()</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, logevent.o(i._ZN8LogEvent17testRotationMotorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LogEvent::testRotationMotor() &rArr; MotorManager::instance() &rArr; MotorManager::MotorManager() &rArr; MotorManager::xStepToOrigin() &rArr; MotorManager::xYAxisToUp(unsigned) &rArr; MotorManager::isYAxisLrt() &rArr; CurrentAdc::instance() &rArr; CurrentAdc::CurrentAdc()
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::instance()
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xRotationToClose(unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xRotationToOpen(unsigned)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vRotateOn(Motor::Dir)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::vSetDir(Motor::Dir)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::instance()
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::test()
</UL>

<P><STRONG><a name="[129]"></a>LogEvent::test()</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, logevent.o(i._ZN8LogEvent4testEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LogEvent::test() &rArr; LogEvent::testDeliver() &rArr; DeliverManager::deliver(const DeliverObject&, DeliverListener*) &rArr; MotorManager::MotorManager() &rArr; MotorManager::xStepToOrigin() &rArr; MotorManager::xYAxisToUp(unsigned) &rArr; MotorManager::isYAxisLrt() &rArr; CurrentAdc::instance() &rArr; CurrentAdc::CurrentAdc()
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::testRotationMotor()
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::testPowerBoxMotor()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::testElectorLock()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::testYAxisMotor()
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::testStepMotor()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::testPushMotor()
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::testDropMotor()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::testDeliver()
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogTask::run()
</UL>

<P><STRONG><a name="[12a]"></a>LogEvent::error()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, logevent.o(i._ZN8LogEvent5errorEv))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogTask::run()
</UL>

<P><STRONG><a name="[84]"></a>MainUart::write(const unsigned char*, unsigned short)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mainuart.o(i._ZN8MainUart5writeEPKht))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MainUart::write(const unsigned char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainUart::write(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mainuart.o(.constdata__ZTV8MainUart)
</UL>
<P><STRONG><a name="[139]"></a>MainUart::write(unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mainuart.o(i._ZN8MainUart5writeEh))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainUart::write(const unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[d9]"></a>MainUart::MainUart()</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, mainuart.o(i._ZN8MainUartC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MainUart::MainUart() &rArr; Receiver::Receiver(const char*, unsigned long long*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Receiver::Receiver(const char*, unsigned long long*, unsigned, unsigned)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sender::Sender(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatusUpdateTask::run()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverTask::run()
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[17c]"></a>MainUart::MainUart__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, mainuart.o(i._ZN8MainUartC1Ev), UNUSED)

<P><STRONG><a name="[12e]"></a>Receiver::Receiver(const char*, unsigned long long*, unsigned, unsigned)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, receiver.o(i._ZN8ReceiverC1EPKcPyjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Receiver::Receiver(const char*, unsigned long long*, unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainUart::MainUart()
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogUart::LogUart()
</UL>

<P><STRONG><a name="[17d]"></a>Receiver::Receiver__sub_object(const char*, unsigned long long*, unsigned, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, receiver.o(i._ZN8ReceiverC1EPKcPyjj), UNUSED)

<P><STRONG><a name="[105]"></a>MainEvent::exec(BaseOutput&)</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, mainevent.o(i._ZN9MainEvent4execER10BaseOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MainEvent::exec(BaseOutput&) &rArr; MainEvent::deliver(BaseOutput&, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; MotorManager::instance() &rArr; MotorManager::MotorManager() &rArr; MotorManager::xStepToOrigin() &rArr; MotorManager::xYAxisToUp(unsigned) &rArr; MotorManager::isYAxisLrt() &rArr; CurrentAdc::instance() &rArr; CurrentAdc::CurrentAdc()
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event::isCorrect()
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::instance()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::vSetDir(MotorManager::Dir)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseOutput::nck()
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseOutput::ack()
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainEvent::deliver(BaseOutput&, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverTask::run()
</UL>

<P><STRONG><a name="[13b]"></a>MainEvent::deliver(BaseOutput&, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 610 bytes, Stack size 56 bytes, mainevent.o(i._ZN9MainEvent7deliverER10BaseOutputhhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MainEvent::deliver(BaseOutput&, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; MotorManager::instance() &rArr; MotorManager::MotorManager() &rArr; MotorManager::xStepToOrigin() &rArr; MotorManager::xYAxisToUp(unsigned) &rArr; MotorManager::isYAxisLrt() &rArr; CurrentAdc::instance() &rArr; CurrentAdc::CurrentAdc()
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseOutput::buildAndWrite()
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseOutput::append1(unsigned char)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::instance()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPushNext(unsigned)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPushBack(unsigned)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xDropOut(unsigned)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xRotationToOpen2(unsigned)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xRotationToClose(unsigned)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox5Toggle(unsigned)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox4Toggle(unsigned)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox3Toggle(unsigned)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox2Toggle(unsigned)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xPowerBox1Toggle(unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xRotationToOpen(unsigned)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xStepToOrigin()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xYAxisToDown(unsigned)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BaseOutput::setAction(unsigned char)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::xStepForMm(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainEvent::exec(BaseOutput&)
</UL>

<P><STRONG><a name="[85]"></a>StartTask::run()</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, main.o(i._ZN9StartTask3runEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = StartTask::run() &rArr; MotorManager::instance() &rArr; MotorManager::MotorManager() &rArr; MotorManager::xStepToOrigin() &rArr; MotorManager::xYAxisToUp(unsigned) &rArr; MotorManager::isYAxisLrt() &rArr; CurrentAdc::instance() &rArr; CurrentAdc::CurrentAdc()
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task::Task__sub_object(const char*, unsigned long long*, unsigned, osPriority_t)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task::start()
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatusUpdateTask::StatusUpdateTask()
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverTask::ReceiverTask()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentAdc::CurrentAdc()
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::instance()
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata__ZTV9StartTask)
</UL>
<P><STRONG><a name="[d8]"></a>__cxa_guard_acquire</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatusUpdateTask::run()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverTask::run()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask::run()
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogTask::run()
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorManager::instance()
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentAdc::instance()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeliverManager::deliver(const DeliverObject&, DeliverListener*)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogEvent::testDeliver()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::instance()
</UL>

<P><STRONG><a name="[82]"></a>__cxa_pure_virtual</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_pure_virtual &rArr; __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> task.o(.constdata__ZTV4Task)
</UL>
<P><STRONG><a name="[89]"></a>_mutex_acquire</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rtx_lib.o(i._mutex_acquire), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _mutex_acquire &rArr; os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>

<P><STRONG><a name="[8a]"></a>_mutex_free</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_lib.o(i._mutex_free), UNUSED, KEPT)
<BR><BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[8b]"></a>_mutex_initialize</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rtx_lib.o(i._mutex_initialize), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _mutex_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>

<P><STRONG><a name="[8c]"></a>_mutex_release</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rtx_lib.o(i._mutex_release), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _mutex_release &rArr; os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>

<P><STRONG><a name="[97]"></a>_platform_post_stackheap_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtx_lib.o(i._platform_post_stackheap_init))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_postsh_1
</UL>

<P><STRONG><a name="[9b]"></a>main</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = main &rArr; Task::Task__sub_object(const char*, unsigned long long*, unsigned, osPriority_t)
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task::Task__sub_object(const char*, unsigned long long*, unsigned, osPriority_t)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task::start()
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[bd]"></a>osRtxErrorNotify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_config.o(i.osRtxErrorNotify))
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[75]"></a>osRtxIdleThread</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_config.o(i.osRtxIdleThread))
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxIdleThread
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxIdleThread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osRtxThreadStartup)
</UL>
<P><STRONG><a name="[92]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[17e]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[17f]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[d7]"></a>SetSysClock</STRONG> (Thumb, 162 bytes, Stack size 12 bytes, system_stm32f4xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[86]"></a>__sti___11_LogUart_cpp_f947086d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, loguart.o(i.__sti___11_LogUart_cpp_f947086d))
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event::Event()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loguart.o(.init_array)
</UL>
<P><STRONG><a name="[124]"></a>initGpio()</STRONG> (Thumb, 226 bytes, Stack size 8 bytes, motor.o(i._Z8initGpiov))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = initGpio()
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor::Motor()
</UL>

<P><STRONG><a name="[87]"></a>__sti___12_MainUart_cpp_f0dc2c7d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mainuart.o(i.__sti___12_MainUart_cpp_f0dc2c7d))
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Event::Event()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mainuart.o(.init_array)
</UL>
<P><STRONG><a name="[13e]"></a>os_kernel_is_active</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rtx_lib.o(i.os_kernel_is_active), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = os_kernel_is_active
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>

<P><STRONG><a name="[6b]"></a>svcRtxKernelGetState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_kernel.o(.text.svcRtxKernelGetState))
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetState)
</UL>
<P><STRONG><a name="[6c]"></a>svcRtxKernelInitialize</STRONG> (Thumb, 376 bytes, Stack size 32 bytes, rtx_kernel.o(.text.svcRtxKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = svcRtxKernelInitialize &rArr; osRtxMemoryPoolInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelInitialize)
</UL>
<P><STRONG><a name="[6d]"></a>svcRtxKernelStart</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, rtx_kernel.o(.text.svcRtxKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = svcRtxKernelStart &rArr; osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Setup
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetIRQn
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelStart)
</UL>
<P><STRONG><a name="[c7]"></a>ThreadFlagsCheck</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, rtx_thread.o(.text.ThreadFlagsCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ThreadFlagsCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[c1]"></a>osRtxThreadBlock</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadBlock))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>

<P><STRONG><a name="[cb]"></a>osRtxThreadDelayInsert</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadDelayInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadDelayInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[cc]"></a>osRtxThreadDelayRemove</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadDelayRemove))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
</UL>

<P><STRONG><a name="[c3]"></a>osRtxThreadFree</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadFree &rArr; osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[7e]"></a>osRtxThreadPostProcess</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxThreadPostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[78]"></a>svcRtxThreadExit</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, rtx_thread.o(.text.svcRtxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = svcRtxThreadExit &rArr; osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadExit)
</UL>
<P><STRONG><a name="[79]"></a>svcRtxThreadNew</STRONG> (Thumb, 480 bytes, Stack size 48 bytes, rtx_thread.o(.text.svcRtxThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = svcRtxThreadNew &rArr; osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadNew)
</UL>
<P><STRONG><a name="[7a]"></a>svcRtxThreadTerminate</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, rtx_thread.o(.text.svcRtxThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = svcRtxThreadTerminate &rArr; osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadTerminate)
</UL>
<P><STRONG><a name="[6a]"></a>svcRtxDelay</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_delay.o(.text.svcRtxDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = svcRtxDelay &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_delay.o(.text.osDelay)
</UL>
<P><STRONG><a name="[71]"></a>svcRtxMutexAcquire</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcRtxMutexAcquire &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexAcquire)
</UL>
<P><STRONG><a name="[72]"></a>svcRtxMutexDelete</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, rtx_mutex.o(.text.svcRtxMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = svcRtxMutexDelete &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexDelete)
</UL>
<P><STRONG><a name="[73]"></a>svcRtxMutexNew</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcRtxMutexNew &rArr; osRtxMemoryPoolAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexNew)
</UL>
<P><STRONG><a name="[74]"></a>svcRtxMutexRelease</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcRtxMutexRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexRelease)
</UL>
<P><STRONG><a name="[b0]"></a>MessageQueueGet</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, rtx_msgqueue.o(.text.MessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MessageQueueGet
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[ba]"></a>MessageQueuePut</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rtx_msgqueue.o(.text.MessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MessageQueuePut
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[b5]"></a>MessageQueueRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rtx_msgqueue.o(.text.MessageQueueRemove))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[7c]"></a>osRtxMessageQueuePostProcess</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osRtxMessageQueuePostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueRemove
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
</UL>
<P><STRONG><a name="[6e]"></a>svcRtxMessageQueueGet</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = svcRtxMessageQueueGet &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueRemove
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueueGet)
</UL>
<P><STRONG><a name="[6f]"></a>svcRtxMessageQueueNew</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcRtxMessageQueueNew &rArr; osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueueNew)
</UL>
<P><STRONG><a name="[70]"></a>svcRtxMessageQueuePut</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = svcRtxMessageQueuePut &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueuePut)
</UL>
<P><STRONG><a name="[cf]"></a>TimerInsert</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, rtx_timer.o(.text.TimerInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TimerInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[77]"></a>osRtxTimerTick</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rtx_timer.o(.text.osRtxTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osRtxTimerTick &rArr; osMessageQueuePut &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(.text.osRtxTimerThread)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
